geom_rect(data = df.stats, aes(fill =  estimate < 1, alpha = p.value < 0.05), inherit.aes = FALSE,
xmin = -Inf ,xmax = Inf, ymin = -Inf, ymax = Inf) +
geom_point(alpha = .025, size = .5) +
geom_smooth(method = smooth.method, formula = smooth.formula, method.args = smooth.method.args, color = 'brown', fill = 'orange', alpha = .2, size = .25) +
scale_y_continuous(name = '', position = 'right') + # Fractional occupancy / TMT-B [s]
geom_text(data = ~summarise(., label = n()), inherit.aes = FALSE) +
scale_x_continuous(name = axis.title.x, trans = trans, breaks = breaks.x) +
facet_grid(design ~ atlas, scales = 'free', switch = 'y') +
guides(fill = 'none', alpha = 'none') +
theme_bw() +
theme(panel.grid = element_blank()
, strip.background = element_blank()
, strip.text = element_text(size = 4)
, legend.position = 'bottom', legend.direction = 'horizontal'
, axis.title = element_text(size = 6)
, axis.text = element_text(size = 4)
, axis.ticks = element_line(size = 0.1))
}
p.panel.beta <- d.dFC %>%
inner_join(d.struct) %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map2(data, cSVDmeas, ~panelplot(df = ..1
, df.stats = m.FO %>% dplyr::filter(cSVDmeas == ..2, term == 'cSVDtrans')
, cSVDmeas = ..2)))
p.panel.beta$plt[[1]]
panelplot <- function(df, df.stats, x = cSVDvalue, y = FO.high
, trans = 'log10'
, cSVDmeas
, axis.title.x = cSVDlabels[cSVDmeas]
, breaks.x = c(0.1, 1, 10)
, smooth.method = 'lm', smooth.formula = 'y~x', smooth.method.args = NULL){
df %>%
ggplot(aes(x = {{x}}, y = {{y}})) +
geom_rect(data = df.stats, aes(fill =  estimate < 1, alpha = p.value < 0.05), inherit.aes = FALSE,
xmin = -Inf ,xmax = Inf, ymin = -Inf, ymax = Inf) +
geom_point(alpha = .025, size = .5) +
geom_smooth(method = smooth.method, formula = smooth.formula, method.args = smooth.method.args, color = 'brown', fill = 'orange', alpha = .2, size = .25) +
scale_y_continuous(name = '', position = 'right') + # Fractional occupancy / TMT-B [s]
geom_text(data = ~summarise(., label = n()), x = 0, y = 1, inherit.aes = FALSE) +
scale_x_continuous(name = axis.title.x, trans = trans, breaks = breaks.x) +
facet_grid(design ~ atlas, scales = 'free', switch = 'y') +
guides(fill = 'none', alpha = 'none') +
theme_bw() +
theme(panel.grid = element_blank()
, strip.background = element_blank()
, strip.text = element_text(size = 4)
, legend.position = 'bottom', legend.direction = 'horizontal'
, axis.title = element_text(size = 6)
, axis.text = element_text(size = 4)
, axis.ticks = element_line(size = 0.1))
}
p.panel.beta <- d.dFC %>%
inner_join(d.struct) %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map2(data, cSVDmeas, ~panelplot(df = ..1
, df.stats = m.FO %>% dplyr::filter(cSVDmeas == ..2, term == 'cSVDtrans')
, cSVDmeas = ..2)))
p.panel.beta$plt[[1]]
panelplot <- function(df, df.stats, x = cSVDvalue, y = FO.high
, trans = 'log10'
, cSVDmeas
, axis.title.x = cSVDlabels[cSVDmeas]
, breaks.x = c(0.1, 1, 10)
, smooth.method = 'lm', smooth.formula = 'y~x', smooth.method.args = NULL){
df %>%
ggplot(aes(x = {{x}}, y = {{y}})) +
geom_rect(data = df.stats, aes(fill =  estimate < 1, alpha = p.value < 0.05), inherit.aes = FALSE,
xmin = -Inf ,xmax = Inf, ymin = -Inf, ymax = Inf) +
geom_point(alpha = .025, size = .5) +
geom_smooth(method = smooth.method, formula = smooth.formula, method.args = smooth.method.args, color = 'brown', fill = 'orange', alpha = .2, size = .25) +
scale_y_continuous(name = '', position = 'right') + # Fractional occupancy / TMT-B [s]
geom_text(data = ~summarise(., n = n()), aes(label = n),  x = 0, y = 1, inherit.aes = FALSE) +
scale_x_continuous(name = axis.title.x, trans = trans, breaks = breaks.x) +
facet_grid(design ~ atlas, scales = 'free', switch = 'y') +
guides(fill = 'none', alpha = 'none') +
theme_bw() +
theme(panel.grid = element_blank()
, strip.background = element_blank()
, strip.text = element_text(size = 4)
, legend.position = 'bottom', legend.direction = 'horizontal'
, axis.title = element_text(size = 6)
, axis.text = element_text(size = 4)
, axis.ticks = element_line(size = 0.1))
}
p.panel.beta <- d.dFC %>%
inner_join(d.struct) %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map2(data, cSVDmeas, ~panelplot(df = ..1
, df.stats = m.FO %>% dplyr::filter(cSVDmeas == ..2, term == 'cSVDtrans')
, cSVDmeas = ..2)))
p.panel.beta$plt[[1]]
panelplot <- function(df, df.stats, x = cSVDvalue, y = FO.high
, trans = 'log10'
, cSVDmeas
, axis.title.x = cSVDlabels[cSVDmeas]
, breaks.x = c(0.1, 1, 10)
, smooth.method = 'lm', smooth.formula = 'y~x', smooth.method.args = NULL){
df %>%
ggplot(aes(x = {{x}}, y = {{y}})) +
geom_rect(data = df.stats, aes(fill =  estimate < 1, alpha = p.value < 0.05), inherit.aes = FALSE,
xmin = -Inf ,xmax = Inf, ymin = -Inf, ymax = Inf) +
geom_point(alpha = .025, size = .5) +
geom_smooth(method = smooth.method, formula = smooth.formula, method.args = smooth.method.args, color = 'brown', fill = 'orange', alpha = .2, size = .25) +
scale_y_continuous(name = '', position = 'right') + # Fractional occupancy / TMT-B [s]
geom_text(data = ~summarise(., n = n()), aes(label = n),  x = 0, y = .3, size = 10, color = 'orange', inherit.aes = FALSE) +
scale_x_continuous(name = axis.title.x, trans = trans, breaks = breaks.x) +
facet_grid(design ~ atlas, scales = 'free', switch = 'y') +
guides(fill = 'none', alpha = 'none') +
theme_bw() +
theme(panel.grid = element_blank()
, strip.background = element_blank()
, strip.text = element_text(size = 4)
, legend.position = 'bottom', legend.direction = 'horizontal'
, axis.title = element_text(size = 6)
, axis.text = element_text(size = 4)
, axis.ticks = element_line(size = 0.1))
}
p.panel.beta <- d.dFC %>%
inner_join(d.struct) %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map2(data, cSVDmeas, ~panelplot(df = ..1
, df.stats = m.FO %>% dplyr::filter(cSVDmeas == ..2, term == 'cSVDtrans')
, cSVDmeas = ..2)))
p.panel.beta$plt[[1]]
p.panel.beta <- d.dFC %>%
inner_join(d.struct) %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map2(data, cSVDmeas, ~panelplot(df = ..1 %>% group_by(design, atlas)
, df.stats = m.FO %>% dplyr::filter(cSVDmeas == ..2, term == 'cSVDtrans')
, cSVDmeas = ..2)))
p.panel.beta$plt[[1]]
panelplot <- function(df, df.stats, x = cSVDvalue, y = FO.high
, trans = 'log10'
, cSVDmeas
, axis.title.x = cSVDlabels[cSVDmeas]
, breaks.x = c(0.1, 1, 10)
, smooth.method = 'lm', smooth.formula = 'y~x', smooth.method.args = NULL){
df %>%
group_by(design, atlas)
ggplot(aes(x = {{x}}, y = {{y}})) +
geom_rect(data = df.stats, aes(fill =  estimate < 1, alpha = p.value < 0.05), inherit.aes = FALSE,
xmin = -Inf ,xmax = Inf, ymin = -Inf, ymax = Inf) +
geom_point(alpha = .025, size = .5) +
geom_smooth(method = smooth.method, formula = smooth.formula, method.args = smooth.method.args, color = 'brown', fill = 'orange', alpha = .2, size = .25) +
scale_y_continuous(name = '', position = 'right') + # Fractional occupancy / TMT-B [s]
geom_text(data = ~summarise(., n = n()), aes(label = n),  x = 0, y = .4, size = 6, color = 'black', inherit.aes = FALSE) +
scale_x_continuous(name = axis.title.x, trans = trans, breaks = breaks.x) +
facet_grid(design ~ atlas, scales = 'free', switch = 'y') +
guides(fill = 'none', alpha = 'none') +
theme_bw() +
theme(panel.grid = element_blank()
, strip.background = element_blank()
, strip.text = element_text(size = 4)
, legend.position = 'bottom', legend.direction = 'horizontal'
, axis.title = element_text(size = 6)
, axis.text = element_text(size = 4)
, axis.ticks = element_line(size = 0.1))
}
p.panel.beta <- d.dFC %>%
inner_join(d.struct) %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map2(data, cSVDmeas, ~panelplot(df = ..1
, df.stats = m.FO %>% dplyr::filter(cSVDmeas == ..2, term == 'cSVDtrans')
, cSVDmeas = ..2)))
panelplot <- function(df, df.stats, x = cSVDvalue, y = FO.high
, trans = 'log10'
, cSVDmeas
, axis.title.x = cSVDlabels[cSVDmeas]
, breaks.x = c(0.1, 1, 10)
, smooth.method = 'lm', smooth.formula = 'y~x', smooth.method.args = NULL){
df %>%
group_by(design, atlas) %>%
ggplot(aes(x = {{x}}, y = {{y}})) +
geom_rect(data = df.stats, aes(fill =  estimate < 1, alpha = p.value < 0.05), inherit.aes = FALSE,
xmin = -Inf ,xmax = Inf, ymin = -Inf, ymax = Inf) +
geom_point(alpha = .025, size = .5) +
geom_smooth(method = smooth.method, formula = smooth.formula, method.args = smooth.method.args, color = 'brown', fill = 'orange', alpha = .2, size = .25) +
scale_y_continuous(name = '', position = 'right') + # Fractional occupancy / TMT-B [s]
geom_text(data = ~summarise(., n = n()), aes(label = n),  x = 0, y = .4, size = 6, color = 'black', inherit.aes = FALSE) +
scale_x_continuous(name = axis.title.x, trans = trans, breaks = breaks.x) +
facet_grid(design ~ atlas, scales = 'free', switch = 'y') +
guides(fill = 'none', alpha = 'none') +
theme_bw() +
theme(panel.grid = element_blank()
, strip.background = element_blank()
, strip.text = element_text(size = 4)
, legend.position = 'bottom', legend.direction = 'horizontal'
, axis.title = element_text(size = 6)
, axis.text = element_text(size = 4)
, axis.ticks = element_line(size = 0.1))
}
p.panel.beta <- d.dFC %>%
inner_join(d.struct) %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map2(data, cSVDmeas, ~panelplot(df = ..1
, df.stats = m.FO %>% dplyr::filter(cSVDmeas == ..2, term == 'cSVDtrans')
, cSVDmeas = ..2)))
p.panel.beta$plt[[1]]
d.dFC %>% summarise(n())
d.dFC %>% group_by(design) %>%  summarise(n())
d.dFC %>% summarise(n=n()) %>% summarise(mean(n))
d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n))
d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, ' (n=', nn, ')'))
d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')'))
d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn)
d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn) %>% as.list()
d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn) %>% unstack()
d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn) %>% unstack(lab ~ design)
d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn) %>% unstack(lab ~ design) %>% as.list()
d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn) %>% unstack(lab ~ design)
res<-d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn) %>% unstack(lab ~ design)
res$res
res$res['24p']
res['24p']
res['24p',]
res<-d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn) %>% split()
res<-d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn) %>% split(designs)
res<-d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn)
res<-d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn) %>% deframe()
res<-d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn)
d.dFC %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn) %>% deframe()
panelplot <- function(df, df.stats, x = cSVDvalue, y = FO.high
, trans = 'log10'
, cSVDmeas
, axis.title.x = cSVDlabels[cSVDmeas]
, breaks.x = c(0.1, 1, 10)
, smooth.method = 'lm', smooth.formula = 'y~x', smooth.method.args = NULL){
labeller.design <- df %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn) %>% deframe()
df %>%
group_by(design, atlas) %>%
ggplot(aes(x = {{x}}, y = {{y}})) +
geom_rect(data = df.stats, aes(fill =  estimate < 1, alpha = p.value < 0.05), inherit.aes = FALSE,
xmin = -Inf ,xmax = Inf, ymin = -Inf, ymax = Inf) +
geom_point(alpha = .025, size = .5) +
geom_smooth(method = smooth.method, formula = smooth.formula, method.args = smooth.method.args, color = 'brown', fill = 'orange', alpha = .2, size = .25) +
scale_y_continuous(name = '', position = 'right') + # Fractional occupancy / TMT-B [s]
geom_text(data = ~summarise(., n = n()), aes(label = n),  x = 0, y = .4, size = 6, color = 'black', inherit.aes = FALSE) +
scale_x_continuous(name = axis.title.x, trans = trans, breaks = breaks.x) +
facet_grid(design ~ atlas, scales = 'free', switch = 'y', labeller = list(design = labeller.design)) +
guides(fill = 'none', alpha = 'none') +
theme_bw() +
theme(panel.grid = element_blank()
, strip.background = element_blank()
, strip.text = element_text(size = 4)
, legend.position = 'bottom', legend.direction = 'horizontal'
, axis.title = element_text(size = 6)
, axis.text = element_text(size = 4)
, axis.ticks = element_line(size = 0.1))
}
p.panel.beta <- d.dFC %>%
inner_join(d.struct) %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map2(data, cSVDmeas, ~panelplot(df = ..1
, df.stats = m.FO %>% dplyr::filter(cSVDmeas == ..2, term == 'cSVDtrans')
, cSVDmeas = ..2)))
panelplot <- function(df, df.stats, x = cSVDvalue, y = FO.high
, trans = 'log10'
, cSVDmeas
, axis.title.x = cSVDlabels[cSVDmeas]
, breaks.x = c(0.1, 1, 10)
, smooth.method = 'lm', smooth.formula = 'y~x', smooth.method.args = NULL){
labeller.design <- df %>% group_by(design, atlas) %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn) %>% deframe()
df %>%
ggplot(aes(x = {{x}}, y = {{y}})) +
geom_rect(data = df.stats, aes(fill =  estimate < 1, alpha = p.value < 0.05), inherit.aes = FALSE,
xmin = -Inf ,xmax = Inf, ymin = -Inf, ymax = Inf) +
geom_point(alpha = .025, size = .5) +
geom_smooth(method = smooth.method, formula = smooth.formula, method.args = smooth.method.args, color = 'brown', fill = 'orange', alpha = .2, size = .25) +
scale_y_continuous(name = '', position = 'right') + # Fractional occupancy / TMT-B [s]
geom_text(data = ~summarise(., n = n()), aes(label = n),  x = 0, y = .4, size = 6, color = 'black', inherit.aes = FALSE) +
scale_x_continuous(name = axis.title.x, trans = trans, breaks = breaks.x) +
facet_grid(design ~ atlas, scales = 'free', switch = 'y', labeller = list(design = labeller.design)) +
guides(fill = 'none', alpha = 'none') +
theme_bw() +
theme(panel.grid = element_blank()
, strip.background = element_blank()
, strip.text = element_text(size = 4)
, legend.position = 'bottom', legend.direction = 'horizontal'
, axis.title = element_text(size = 6)
, axis.text = element_text(size = 4)
, axis.ticks = element_line(size = 0.1))
}
p.panel.beta <- d.dFC %>%
inner_join(d.struct) %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map2(data, cSVDmeas, ~panelplot(df = ..1
, df.stats = m.FO %>% dplyr::filter(cSVDmeas == ..2, term == 'cSVDtrans')
, cSVDmeas = ..2)))
p.panel.beta$plt[[1]]
panelplot <- function(df, df.stats, x = cSVDvalue, y = FO.high
, trans = 'log10'
, cSVDmeas
, axis.title.x = cSVDlabels[cSVDmeas]
, breaks.x = c(0.1, 1, 10)
, smooth.method = 'lm', smooth.formula = 'y~x', smooth.method.args = NULL){
labeller.design <- df %>% group_by(design, atlas) %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn) %>% deframe()
df %>%
ggplot(aes(x = {{x}}, y = {{y}})) +
geom_rect(data = df.stats, aes(fill =  estimate < 1, alpha = p.value < 0.05), inherit.aes = FALSE,
xmin = -Inf ,xmax = Inf, ymin = -Inf, ymax = Inf) +
geom_point(alpha = .025, size = .5) +
geom_smooth(method = smooth.method, formula = smooth.formula, method.args = smooth.method.args, color = 'brown', fill = 'orange', alpha = .2, size = .25) +
scale_y_continuous(name = '', position = 'right') + # Fractional occupancy / TMT-B [s]
geom_text(data = ~summarise(., n = n()), aes(label = n),  x = 0, y = .4, size = 6, color = 'black', inherit.aes = FALSE) +
scale_x_continuous(name = axis.title.x, trans = trans, breaks = breaks.x) +
facet_grid(design ~ atlas, scales = 'free', switch = 'y', labeller = labeller(design = as_labeller(labeller.design))) +
guides(fill = 'none', alpha = 'none') +
theme_bw() +
theme(panel.grid = element_blank()
, strip.background = element_blank()
, strip.text = element_text(size = 4)
, legend.position = 'bottom', legend.direction = 'horizontal'
, axis.title = element_text(size = 6)
, axis.text = element_text(size = 4)
, axis.ticks = element_line(size = 0.1))
}
p.panel.beta <- d.dFC %>%
inner_join(d.struct) %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map2(data, cSVDmeas, ~panelplot(df = ..1
, df.stats = m.FO %>% dplyr::filter(cSVDmeas == ..2, term == 'cSVDtrans')
, cSVDmeas = ..2)))
p.panel.beta$plt[[1]]
panelplot <- function(df, df.stats, x = cSVDvalue, y = FO.high
, trans = 'log10'
, cSVDmeas
, axis.title.x = cSVDlabels[cSVDmeas]
, breaks.x = c(0.1, 1, 10)
, smooth.method = 'lm', smooth.formula = 'y~x', smooth.method.args = NULL){
labeller.design <- df %>% group_by(design, atlas) %>% summarise(n=n()) %>% summarise(nn=mean(n)) %>% mutate(lab = paste0(design, '\n(n=', nn, ')')) %>% dplyr::select(-nn) %>% deframe()
df %>%
ggplot(aes(x = {{x}}, y = {{y}})) +
geom_rect(data = df.stats, aes(fill =  estimate < 1, alpha = p.value < 0.05), inherit.aes = FALSE,
xmin = -Inf ,xmax = Inf, ymin = -Inf, ymax = Inf) +
geom_point(alpha = .025, size = .5) +
geom_smooth(method = smooth.method, formula = smooth.formula, method.args = smooth.method.args, color = 'brown', fill = 'orange', alpha = .2, size = .25) +
scale_y_continuous(name = '', position = 'right') + # Fractional occupancy / TMT-B [s]
scale_x_continuous(name = axis.title.x, trans = trans, breaks = breaks.x) +
facet_grid(design ~ atlas, scales = 'free', switch = 'y', labeller = labeller(design = as_labeller(labeller.design))) +
guides(fill = 'none', alpha = 'none') +
theme_bw() +
theme(panel.grid = element_blank()
, strip.background = element_blank()
, strip.text = element_text(size = 4)
, legend.position = 'bottom', legend.direction = 'horizontal'
, axis.title = element_text(size = 6)
, axis.text = element_text(size = 4)
, axis.ticks = element_line(size = 0.1))
}
p.panel.beta <- d.dFC %>%
inner_join(d.struct) %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map2(data, cSVDmeas, ~panelplot(df = ..1
, df.stats = m.FO %>% dplyr::filter(cSVDmeas == ..2, term == 'cSVDtrans')
, cSVDmeas = ..2)))
p.panel.beta$plt[[1]]
p.panel.gamma <- d.dFC %>%
inner_join(d.struct) %>%
inner_join(d.clinical) %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map2(data, cSVDmeas, ~panelplot(df = ..1
, df.stats = m.TMT %>% dplyr::filter(cSVDmeas == ..2, term == 'FO.high')
, x = FO.high, y = TMTB
, cSVDmeas = ..2
, axis.title.x = 'Average FO in high-occupancy states'
, trans = 'identity'
, breaks.x = c(.1, .2, .3, .4)
, smooth.method = 'glm'
, smooth.method.args = list(family = Gamma(link = 'log')))))
p.panel.gamma$plt[[1]]
?glm
sessionInfo()
packageVersion("stats")
version()
version
read.csv('./../../../derivatives/WMH/structural_params.csv', header = TRUE) %>%
as_tibble() %>%
dplyr::select(ID, all_of(preds)) %>%
write_csv(file = './../../../derivatives/WMH/cSVD.csv', col_names = TRUE)
filenames <- list.files(path = './../../derivatives/data/prod', pattern = 'dFC.*~.dat$', full.names = TRUE)
d.dFC <- map_df(.x = filenames, .f = ~read_csv(.), .id = 'filename') %>%
mutate(filename = filenames[as.numeric(filename)]) %>%
separate(filename, '~', into = c('pre','design','atlas','post')) %>%
dplyr::select(-c(pre, post)) %>%
mutate(ID = stringr::str_sub(ID, 5, 13)) %>%
dplyr::select(design, atlas, ID, starts_with('fracocc')) %>%
pivot_longer(cols = starts_with('fracocc')) %>%
separate(name , '_', into = c('meas', 'state')) %>%
mutate(state = recode(as.numeric(state), !!!states) %>% factor(levels = states, ordered = TRUE)) %>%
rename(frac_occ = value) %>%
group_by(design, atlas, ID) %>%
summarise(FO.high = mean(frac_occ[1:2])
, FO.low = mean(frac_occ[3:5])) %>%  # automatically drops column 'meas'
mutate(design = factor(design, levels = designs)
, atlas = factor(atlas, levels = atlasses))
d.tt <- d.dFC %>%
nest() %>%
mutate(t.out = map(data, ~t.test(.$FO.high, .$FO.low, paired = TRUE))
, estimate = map_dbl(t.out, ~.$estimate)
, p.value = map_dbl(t.out, ~.$p.value)
, conf.low = map_dbl(t.out, ~.$conf.int[[1]])
, conf.high = map_dbl(t.out, ~.$conf.int[[2]])) %>%
unnest(cols = c(estimate, p.value, conf.low, conf.high))
p.forest.tt <- forestplot(d.tt)
p.forest.tt + theme(legend.position = 'right')
f <- 'FO.high ~ cSVDtrans + age + sex'
m.FO <- d.dFC %>%
dplyr::filter(FO.high > 0) %>%
inner_join(d.struct) %>%
inner_join(d.clinical) %>%
group_by(design, atlas, cSVDmeas) %>%
nest() %>%
mutate(f = map(data, ~if_else(all(.$yzero==0), f, paste(f, 'yzero', sep = '+'))) ## use mixture model only when they are zero values in the cSVD measure
, mdl = map2(data, f, ~betareg(formula = as.formula(..2), data = ..1, link = 'logit', link.phi = 'log'))
, tidy = map(mdl, ~tidy(., conf.int = TRUE))
, n = map(data, nrow)
) %>%
unnest(cols = c(tidy, n)) %>%
mutate(across(c(estimate, starts_with('conf')), exp))
p.forest.beta <- m.FO %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map(data, ~forestplot(df = dplyr::filter(., term == 'cSVDtrans')
, breaks.x = c(.9, 1, 1.1), limits.x = c(.8, 1.2)
, breaks.y = NULL
, axis.title.y = ''
, effect.null = 1, effect.pilot = 0.9486211
, estimate = 'Adjusted odds ratio')
))
p.panel.beta <- d.dFC %>%
inner_join(d.struct) %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map2(data, cSVDmeas, ~panelplot(df = ..1
, df.stats = m.FO %>% dplyr::filter(cSVDmeas == ..2, term == 'cSVDtrans')
, cSVDmeas = ..2)))
p.panel.beta$plt[[1]] + p.forest.beta$plt[[1]] +  plot_layout(widths = c(2, 1)) & guides(color = 'none', size = 'none') &
theme(axis.title = element_text(size = 8), axis.text = element_text(size = 6), strip.text = element_text(size = 6))
f <- 'TMTB ~ FO.high + cSVDtrans + age + sex + educationyears'
m.TMT <- d.dFC %>%
dplyr::filter(FO.high > 0) %>%
inner_join(d.struct) %>%
inner_join(d.clinical) %>%
group_by(design, atlas, cSVDmeas) %>%
dplyr::filter(TMTB > 0, educationyears > 0) %>%
nest() %>%
mutate(f = map(data, ~if_else(all(.$yzero==0), f, paste(f, 'yzero', sep = '+'))) ## use mixture model only when they are zero values in the cSVD measure
, mdl = map2(data, f, ~glm(formula = as.formula(..2), data = ..1, family = Gamma(link = 'log')))
, tidy = map(mdl, ~tidy(., exponentiate = TRUE, conf.int = TRUE))
, n = map(data, nrow)
) %>%
unnest(cols = c(tidy, n))
p.forest.gamma <- m.TMT %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map(data, ~forestplot(df = dplyr::filter(., term == 'FO.high')
, breaks.x = c(.8, 1, 1.2), limits.x = c(0, 2)
, breaks.y = NULL
, axis.title.y = ''
, effect.null = 1, effect.pilot = 0.735124
, estimate = 'Adjusted odds ratio')
))
p.panel.gamma <- d.dFC %>%
inner_join(d.struct) %>%
inner_join(d.clinical) %>%
ungroup() %>%
group_by(cSVDmeas) %>%
nest() %>%
mutate(plt = map2(data, cSVDmeas, ~panelplot(df = ..1
, df.stats = m.TMT %>% dplyr::filter(cSVDmeas == ..2, term == 'FO.high')
, x = FO.high, y = TMTB
, cSVDmeas = ..2
, axis.title.x = 'Average FO in high-occupancy states'
, trans = 'identity'
, breaks.x = c(.1, .2, .3, .4)
, smooth.method = 'glm'
, smooth.method.args = list(family = Gamma(link = 'log')))))
p.panel.gamma$plt[[1]] + p.forest.gamma$plt[[1]] +  plot_layout(widths = c(2, 1)) & guides(color = 'none', size = 'none') &
theme(axis.title = element_text(size = 8), axis.text = element_text(size = 6), strip.text = element_text(size = 6))
p.panel.beta$plt[[2]] + p.forest.beta$plt[[2]] +  plot_layout(widths = c(2, 1)) & guides(color = 'none', size = 'none') &
theme(axis.title = element_text(size = 8), axis.text = element_text(size = 6), strip.text = element_text(size = 6))
p.panel.beta$plt[[3]] + p.forest.beta$plt[[3]] +  plot_layout(widths = c(2, 1)) & guides(color = 'none', size = 'none') &
theme(axis.title = element_text(size = 8), axis.text = element_text(size = 6), strip.text = element_text(size = 6))
p.panel.beta$plt[[4]] + p.forest.beta$plt[[4]] +  plot_layout(widths = c(2, 1)) & guides(color = 'none', size = 'none') &
theme(axis.title = element_text(size = 8), axis.text = element_text(size = 6), strip.text = element_text(size = 6))
